import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

class Song implements Comparable<Song> {
    
    private String name;
    private String popularidad;
    private String bailabilidad;
    private String artista;
    private String id;

    public Song(String n, String a, String pp, String bb, String idd){
      name = n;
      artista = a; 
      popularidad = pp;
      bailabilidad = bb;
      id = idd;
    }

    public String getName(){ 
       return name;
    }
    
    public String getID(){ 
       return id;
    }

     public String getPopularidad(){ 
       return popularidad;
    }

     public String getBailabilidad(){ 
       return bailabilidad;
    }

     public String getArtista(){ 
       return artista;
    }
     
     public void Show(){
         System.out.println("Cancion: "+name+" | Artista: "+artista+" | Popularidad: "+popularidad+" | Bailabilidad: "+bailabilidad);
     }

    @Override
    public int compareTo(Song s) {
        
        //this >  s -> +
        //this <  s -> -
        //this == s -> 0
        
        if(this.artista.compareTo(s.getArtista()) < 0){ //this es menor
            return -1;
        }else if(this.artista.compareTo(s.getArtista()) > 0){ //this es mayor
            return 1;
        }else{
            return 0;
        }
        
    }
    
}


class PlayList {
    private Nodo head;
    private int tam=0;
    
    public PlayList(){
        this.head = null;
    }
    
    public void insert(String song, String i){
        Nodo newnode = new Nodo(song,this.head, i);     
        this.head = newnode;
        tam++;
    }
    
    public Nodo remove(){
        
        Nodo ret = this.head;
        
        if(this.head == null) return ret;
        
        this. head = this.head.getNext();
        
        tam--;
        
        return ret;
    }
    
    public boolean empty(){
        return this.head != null ? false : true;
    }
    
    public Nodo getFirst(){
        return this.head;
    }
    
        public int getSize(){
        return this.tam;
    }
        
    public String next(){
        
        if(tam==0){
            return "No hay canciones en la playlist.";
        }else if(this.head.getNext() == null){
            return "No hay una siguiente cancion para reproducir";
        }else{
            return "Siguiente cancion a reproducir: "+this.head.getNext().getSong();
        }
        
        
    }
    
    public void skipN(int n){
        
         if(tam==0){
            System.out.println("No hay canciones en la playlist.");
        }else if(this.head.getNext() == null && n == 1){
            System.out.println("No es posible saltarse 1 cancion, ya que no  hay mas canciones.");
        }else if(this.head.getNext() == null){
            System.out.println("No es posible saltarse "+n+" canciones, ya que no  hay canciones suficientes.");
        }else{
            
            for(int i=0; i<n; i++){
            this.remove();
        }
            
            System.out.println("Se han saltado "+n+" canciones.");
            
        }
        
        
        
    }
    
}

class Nodo {
    
    private String song;
    private String id;
    private Nodo next;
    
    public Nodo(){
        this.song = null;
        this.id = null;
        this.next = null;
    }
    
    public Nodo(String s,String i){
        song = s;
        id = i;
        next = null;
    }
    
    
    public Nodo(String i){
        id = i;
        next = null;
        song = null;
    }
    
    public Nodo( String s, Nodo next, String i){
        song = s;
        id = i;
        this.next = next;

        
    }
    public String getID(){return this.id;}
    
    public String getSong(){return this.song;}
   
    public Nodo getNext(){ return this.next;}
    
    public void setSong(Nodo next){ this.next = next;}
    
}

class Historial {

    private Nodo head;
    private int tam=0;
    
    public Historial() {
        this.head = null;
    }
    
    public void push(String id) {
        Nodo n_node = new Nodo(id);
        this.head  = n_node;
        tam++;
    }
    
    public void pop() {
        if(this.head != null) {
            this.head = this.head.getNext();
            tam--;
        }
    }
    
    public int getSize(){
        return tam;
    }
    
    public boolean empty() {
        if(this.head == null) {
            return true;
        } else {
            return false;
        }
    }
    
    public String top() {
        
        if(this.head==null){
            return "";
        }
        
        return this.head.getID();
    }
}


class Artist implements Comparable<Artist> {
    
    private int n_tracks;
    private String name;
    private double popularidad_promedio;
    private double bailabilidad_promedio;
    private String cancion_popular;
    private String cancion_popular_id;
    
    public Artist(int nt, String n, double pp, double bp, String cp, String id){
        n_tracks = nt;
        name = n;
        popularidad_promedio = pp;
        bailabilidad_promedio = bp;
        cancion_popular = cp;
        cancion_popular_id = id;
    }
    
    public double getPopularidadPromedio(){
        return popularidad_promedio;
    }
    
    public double getBailabilidadPromedio(){
        return bailabilidad_promedio;
    }   
    
    public String getBestSong(){
        return cancion_popular;
    }
    
    public String getBestSongID(){
        return cancion_popular_id;
    }
    
    public void showInfo(){
        
        System.out.println("Nombre artista: "+name);
        System.out.println("Cantidad de tracks: "+n_tracks);
        System.out.println("Promedio popularidad: "+popularidad_promedio);
        System.out.println("Promedio bailabilidad: "+bailabilidad_promedio);
        System.out.println("Mejor cancion: "+cancion_popular);
        System.out.println("ID mejor cancion: "+cancion_popular_id);
        System.out.println("\n\n");
        
    }
    
        public int compareTo(Artist a) {
        
        //this >  s -> +
        //this <  s -> -
        //this == s -> 0
        
        if(this.popularidad_promedio  < a.popularidad_promedio){return -1;}
        else if(this.popularidad_promedio  > a.popularidad_promedio){return 1;}
        else{
            if(this.bailabilidad_promedio < a.bailabilidad_promedio){return -1;}
            else if(this.bailabilidad_promedio > a.bailabilidad_promedio){return 1;}
            else{
                return 0;
            }
        }
        
        
    }
    
}

public class Test {
    
    public static void main (String [] args){
        
        
        String path = "C:\\Users\\maricela\\Desktop\\artistas.txt";

//creo dos arraylist, uno de canciones, otro con artistas (ambos objetos)

        ArrayList<Song> songs = new ArrayList<>();
        ArrayList<Artist> artistas = new ArrayList<>();
     
        String line  = "";
        
        int contador = 0;
        
        try{
            BufferedReader bf = new BufferedReader(new FileReader(path));

            while((line = bf.readLine()) != null){
                
                
//cambiar por el c√≥digo especial que dio el profe
//String[] values = line.split(",(?=(?:[^\"]\"[^\"]\")[^\"]$)", -1);
                String[] values = line.split(",");

                //no leer primera linea 
                if(contador==0){
                    contador++;
                    continue;
                }else{                   
                    //agregar al array las canciones
                    Song nuevo = new Song(values[1],values[5],values[2],values[8],values[0]);
                    songs.add(nuevo);
                }
      
            }
        
        } catch (FileNotFoundException e){
            e.printStackTrace();
        
    }catch (IOException e){
            e.printStackTrace();
        
    }
        
        
        
        //ordenar arreglo de canciones por artista
        
        Collections.sort(songs);
       
        
        /*
        //imprimir arreglo de canciones
        for(Song s : songs){
         System.out.println("Cancion: "+s.getName()+" | Grupo: "+s.getArtista()+" | Bailabilidad: "+s.getBailabilidad()+" | Popularidad: "+s.getPopularidad());
         }
        */
        
        //variables 
        
        int numero_tracks = 1;
        double promp = 0;
        double promb = 0;        
        String bestsong ="";
        String bestid="";
        boolean flag = false;
       
        
        //crear los artistas
        
        for(int i=0; i<songs.size(); i++){
            
            
                
            if(i==songs.size()-1){
                
                    double a = Double.parseDouble(songs.get(i).getPopularidad());
                    double b = Double.parseDouble(songs.get(i).getBailabilidad());
                    
                    if(flag==false){
                    bestsong = songs.get(i).getName();
                }
                
                
                    promp+= a;
                    promb+= b;
                    
                    //best song
                    
                    artistas.add(new Artist(numero_tracks, songs.get(i).getArtista(), promp/numero_tracks, promb/numero_tracks, bestsong, bestid));
                    
            }else if(songs.get(i).getArtista().compareTo(songs.get(i+1).getArtista() ) == 0){
                
                double a2 = Double.parseDouble(songs.get(i+1).getPopularidad());
                double b2 = Double.parseDouble(songs.get(i+1).getBailabilidad());
                
                double a = Double.parseDouble(songs.get(i).getPopularidad());
                double b = Double.parseDouble(songs.get(i).getBailabilidad());

                numero_tracks+=1;
                promp+= a;
                promb+= b;
                
                //5, 10, 8 , 15(ITZY)
                //A, B , C
                // el mayor es B
                
                //best song
                
                if(a > a2){
                    bestsong = songs.get(i).getName();
                    bestid = songs.get(i).getID();
                    flag = true;
                }else if(a == a2){
                    
                    if(b > b2){
                        bestsong = songs.get(i).getName();
                        bestid = songs.get(i).getID();
                        flag = true;
                    }else{
                        bestsong = songs.get(i+1).getName();
                        bestid = songs.get(i+1).getID();
                        flag = true;
                    }
                    
                }

                
            }else{
                
                double a = Double.parseDouble(songs.get(i).getPopularidad());
                double b = Double.parseDouble(songs.get(i).getBailabilidad());
                
                promp+= a;
                promb+= b;
                
                if(flag==false){
                    bestsong = songs.get(i).getName();
                    bestid = songs.get(i).getID();
                }
                
                artistas.add(new Artist(numero_tracks, songs.get(i).getArtista(), promp/numero_tracks, promb/numero_tracks, bestsong, bestid));
                
                //reinicio
                numero_tracks = 1;
                promp = 0;
                promb = 0;
                bestsong = "";
                flag = false;
            }
        }

        //ordenar artistas por popularidad -> bailabidad
        
        Collections.sort(artistas);
        
        /*
        imprimir artistas array
        for (Artist a : artistas){
             a.showInfo();
             System.out.print("\n");
        }
        */
        
        //insertar canciones en la playlist
        PlayList p = new PlayList();
        
        for(int i=0; i<artistas.size(); i++){
            
            p.insert(artistas.get(i).getBestSong(),artistas.get(i).getBestSongID() );
            
        }
        /*
        //imprimir playlist
        for(int i=0; i<artistas.size(); i++){
            System.out.println(p.getFirst().getSong());
            p.remove();
        }
        */    
        
        //interfaz y operacion del usuario
        
        
        Scanner sc = new Scanner(System.in);
        
        Historial h = new Historial();
        ArrayList<String> repuesto = new ArrayList<>();
        
         while(true) {
             
        System.out.println("*********************************");
        System.out.println("BIENVENIDO A TU PLAYLIST FAVORITA");
        System.out.println("*********************************");
        System.out.println("    Cancion actual: "+p.getFirst().getSong());
        System.out.println("0.- Salir del menu");
        System.out.println("1.- Siguiente cancion");
        System.out.println("2.- Saltar N canciones");
        System.out.println("3.- Dar like");
        System.out.println("4.- Historial de likes");
        System.out.println("_________________________________");
        
        int opcion = sc.nextInt();
        
        if(opcion==0){
            System.out.println("Hasta la proxima!");
            break;
        }
            
            switch(opcion){

                case 1: // siguiente canci√≥n
                    System.out.println(p.next());
                    break;
                    
                case 2: // skip N
                    
                    System.out.println("Ingrese cuantas canciones saltarse: ");
                    
                    int n = sc.nextInt();

                    p.skipN(n);
                    
                    break;

                case 3: // like (stack)                    
                    String likedSongID = p.getFirst().getID();
                    
                    //op
                    if(repuesto.contains(likedSongID)==false){
                        repuesto.add(likedSongID);
                        h.push(likedSongID);
                    }else{
                        System.out.println("Ya le has dado like a esta cancion!");
                    }
                    
                    
                    break;

                case 4: // ver historial
                    
                    if(h.getSize()==0){
                        System.out.println("No has dado ningun like!");
                        break;
                    }else{
                        
                        System.out.println("Canciones a las que has dado like:");
                        
                        int t = h.getSize();
                        
                        //op
                        for(int i=0; i<t; i++){
                            
                            //System.out.println(h.top());
                            
                             h.pop();   
                            
                        }
                        
                        for(int i=repuesto.size()-1; i>=0; i--){
                            System.out.println(repuesto.get(i));
                        }
                        
                        System.out.println("Cantidad de likes: "+repuesto.size());

                        break;
                        
                    }
            }
        }
        
        
    } 
}
